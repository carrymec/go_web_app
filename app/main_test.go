package internal_test

import (
	"encoding/json"
	"fmt"
	mapset "github.com/deckarep/golang-set"
	"testing"
)

type AutoGenerated struct {
	Age   int    `json:"age"`
	Name  string `json:"name"`
	Child []int  `json:"child"`
}

func TestJson(m *testing.T) {
	jsonStr1 := `{"age": 14,"name": "potter", "child":[1,2,3]}`
	a := AutoGenerated{}
	json.Unmarshal([]byte(jsonStr1), &a)
	aa := a.Child
	fmt.Println(aa) // 1 2 3
	jsonStr2 := `{"age": 12,"name": "potter", "child":[3,4,5,7,8,9]}`
	json.Unmarshal([]byte(jsonStr2), &a)
	fmt.Println(aa) // 3 4 5
}

type void struct{}

var member void

func TestSlince(t *testing.T) {

	set := make(map[string]void) // New empty set
	set["Foo"] = member          // Add
	for k := range set {         // Loop
		fmt.Println(k)
	}
	delete(set, "Foo") // Delete
	size := len(set)   // Size
	fmt.Println(size)
	_, exists := set["Foo"] // Membership
	fmt.Println(exists)
}

func TestSet(t *testing.T) {

	// 默认创建的线程安全的，如果无需线程安全
	// 可以使用 NewThreadUnsafeSet 创建，使用方法都是一样的。
	s1 := mapset.NewSet(1, 2, 3, 4)
	fmt.Println("s1 contains 3: ", s1.Contains(3))
	fmt.Println("s1 contains 5: ", s1.Contains(5))

	// interface 参数，可以传递任意类型
	s1.Add("poloxue")
	fmt.Println("s1 contains poloxue: ", s1.Contains("poloxue"))
	s1.Remove(3)
	fmt.Println("s1 contains 3: ", s1.Contains(3))

	s2 := mapset.NewSet(1, 3, 4, 5)

	// 并集
	fmt.Println(s1.Union(s2))

}

func TestEditUser(t *testing.T) {
	u1 := u{
		name:   "before",
		gender: "男",
	}
	edit1(&u1)
	fmt.Println(u1.name)

}
func edit1(u *u) {
	u.name = "after"
}

type u struct {
	name, gender string
}

//new  make的区别
